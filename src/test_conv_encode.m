symbols = randi([0 1], 1000, 1);
trellis_2 = poly2trellis(4, [15, 17]);      % 1/2.
trellis_3 = poly2trellis(4, [13, 15, 17]);  % 1/3.

assert_encode = @(real_code, expected_code, description) ...
    assert(all(size(real_code) == size(expected_code)) && ...
           all(real_code == expected_code), ...
           ['Assertion failed: ' description '\n' ...
            'Symbols: %s\n' ...
            'Expected: %s\n' ...
            'Real: %s\n'], ...
           mat2str(symbols), mat2str(expected_code), mat2str(real_code));

% No ending, no CRC.
assert_encode(conv_encode(symbols, false, 2, []), ...
              convenc(symbols, trellis_2), ...
              'conv_encode, 1/2, no ending, no CRC');
assert_encode(conv_encode(symbols, false, 3, []), ...
              convenc(symbols, trellis_3), ...
              'conv_encode, 1/3, no ending, no CRC');

% With ending, no CRC.
symbols_with_ending = [symbols; zeros(3, 1)];
assert_encode(conv_encode(symbols, true, 2, []), ...
              convenc(symbols_with_ending, trellis_2), ...
              'conv_encode, 1/2, with ending, no CRC');
assert_encode(conv_encode(symbols, true, 3, []), ...
              convenc(symbols_with_ending, trellis_3), ...
              'conv_encode, 1/3, with ending, no CRC');
