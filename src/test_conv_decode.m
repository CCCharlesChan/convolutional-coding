LEN = 10;
symbols = randi([0 1], LEN, 1);
trellis_2 = poly2trellis(4, [15, 17]);      % 1/2.
trellis_3 = poly2trellis(4, [13, 15, 17]);  % 1/3.
PSNR = -10;

assert_decode = @(signal, real_symbols, expected_symbols, description) ...
    assert(all(size(real_symbols) == size(expected_symbols)) && ...
           all(real_symbols == expected_symbols), ...
           ['Assertion failed: ' description '\n' ...
            'Signal: %s\n' ...
            'Expected: %s\n' ...
            'Real:     %s\n'], ...
           mat2str(signal), mat2str(expected_symbols), mat2str(real_symbols));

% No ending, no CRC, hard.
signal_2 = transmit(sym_encode(convenc(symbols, trellis_2), 2), PSNR);
signal_3 = transmit(sym_encode(convenc(symbols, trellis_3), 3), PSNR);
code2 = sym_decode(signal_2, 2);
code3 = sym_decode(signal_3, 3);

assert_decode(signal_2, ...
              conv_decode(signal_2, false, 2, [], true), ...
              vitdec(code2, trellis_2, LEN, 'trunc', 'hard'), ...
              'conv_decode, 1/2, no ending, no CRC, hard');
assert_decode(signal_3, ...
              conv_decode(signal_3, false, 3, [], true), ...
              vitdec(code3, trellis_3, LEN, 'trunc', 'hard'), ...
              'conv_decode, 1/3, no ending, no CRC, hard');

% With ending, no CRC, hard.
symbols_with_ending = [symbols; zeros(3, 1)];
signal_2 = transmit(sym_encode(convenc(symbols_with_ending, trellis_2), 2), PSNR);
signal_3 = transmit(sym_encode(convenc(symbols_with_ending, trellis_3), 3), PSNR);
code2 = sym_decode(signal_2, 2);
code3 = sym_decode(signal_3, 3);

expected = vitdec(code2, trellis_2, LEN + 3, 'term', 'hard');
expected = expected(1:end-3);
assert_decode(signal_2, ...
              conv_decode(signal_2, true, 2, [], true), ...
              expected, ...
              'conv_decode, 1/2, with ending, no CRC, hard');

expected = vitdec(code3, trellis_3, LEN + 3, 'term', 'hard');
expected = expected(1:end-3);
assert_decode(signal_3, ...
              conv_decode(signal_3, true, 3, [], true), ...
              expected, ...
              'conv_decode, 1/3, with ending, no CRC, hard');
